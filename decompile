#!/usr/bin/env python
# vim: set foldmethod=marker :

# decompile - turn existing dmod into pydink code. {{{
# Copyright 2011 Bas Wijnen
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# }}}

# {{{ Imports.
import sys
import os
import PIL.Image
import dink
import readini
# }}}

assert len (sys.argv) == 3
readini.set_dmoddir (sys.argv[1])

target = dink.Dink (None)

# {{{ Read and parse hardness.
hard, defaulthard, tilefiles = readini.read_hard ()
# Build tile and hardness images.
for t in tilefiles:
	# TODO: Build tile and hardness images.
	pass
# }}}

# {{{ Read and parse graphics.
collections, sequences, codes = readini.read_ini ()
target.seq.seq = sequences
target.seq.collection = collections
# }}}

# {{{ Read and parse sound.
musics, sounds = readini.read_sound ()
target.sound.sound = sounds
target.sound.music = music
# }}}

readini.read_map (target, hard, defaulthard)

# {{{ Preview and splash image.
target.info = dinkopen (path, 'dmod.diz', 'rb').read ()
p = dinkexists (path, 'preview.bmp'))
if p:
	target.preview = (p, 0, os.stat (p).st_size)
p = dinkexists (path, 'tiles\\splash.bmp')
if p:
	target.splash = (p, 0, os.stat (p).st_size)
# }}}

target.save (sys.argv[2])
