#!/usr/bin/env python
import sys
import layout
import os

created = False
def check (f, content = None):
	global created
	if not os.path.exists (f):
		created = True
		if content == None:
			os.mkdir (f)
			print 'Created directory %s\n' % f
		else:
			open (f, 'w').write (content)
			print 'Created file %s\n' % f

assert len (sys.argv) == 2
root = sys.argv[1]
base = os.path.basename (root)
if base == '':
	base = os.path.basename (os.path.dirname (root))

check (root)
check (os.path.join (root, 'world'))
check (os.path.join (root, 'tile'))
check (os.path.join (root, 'seq'))
check (os.path.join (root, 'music'))
check (os.path.join (root, 'sound'))
check (os.path.join (root, 'script'))
check (os.path.join (root, 'image'))
check (os.path.join (root, 'info' + os.extsep + 'txt'), '%s\n\nThis file should claim copyright and describe the dmod.' % base)
check (os.path.join (root, 'title' + os.extsep + 'txt'), '''\
#music = titlemusic
sprites = 0
#sprite-1 = logo 1		0 0
#color = 0
#background = background
buttons = 3
button-1 = 76 40	game-start
button-2 = 524 40	game-continue
button-3 = 560 440	game-quit
#button-4 = 104 440	game-ordering
#run = custom-start
pointer = special 8
''')
if created:
	print 'Content created: not running build.'
	sys.exit (0)

def rmr (path):
	for f in os.listdir (path):
		fullpath = os.path.join (path, f)
		if os.path.isdir (fullpath):
			rmr (fullpath)
		else:
			os.remove (fullpath)
	os.rmdir (path)

data = layout.Dink (root)
home = os.path.expanduser ('~')
dmods = os.path.join (home, 'dmods')
if not os.path.exists (dmods):
	os.mkdir (dmods)
dmod = os.path.join (dmods, base)
if os.path.exists (dmod):
	rmr (dmod)

data.write (dmod)
